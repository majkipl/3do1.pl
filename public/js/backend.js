/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/backend.js":
/*!*********************************!*\
  !*** ./resources/js/backend.js ***!
  \*********************************/
/***/ (() => {

eval("var event;\nvar height;\nvar starter = {\n  init: function init() {\n    starter.onClick();\n    starter.onChange();\n    starter.onSubmit();\n    starter.onInput();\n    starter.formStyled();\n  },\n  onChange: function onChange() {},\n  onInput: function onInput() {\n    $(document).on(\"input\", \".input, .textarea\", function (e) {\n      e.target.value !== \"\" ? $(this).addClass(\"has-value\").removeClass(\"no-value\") : $(this).removeClass(\"has-value\");\n    });\n  },\n  onClick: function onClick() {\n    $(document).on('click', '.bt-table .remove', function () {\n      var fields = {};\n      var url = $(this).attr('href') + '/' + $(this).data('id');\n      var method = 'DELETE';\n      var headers = {\n        'Content-Type': 'application/json',\n        'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content'),\n        'Authorization': 'Bearer ' + token\n      };\n      if (method === 'PUT' || method === 'DELETE') {\n        headers['X-HTTP-Method-Override'] = method;\n      }\n      if (confirm('Czy na pewno trwale usunąć ten wpis?') == true) {\n        axios({\n          method: method,\n          url: url,\n          headers: headers,\n          data: fields\n        }).then(function (response) {\n          $('.bt-table').bootstrapTable('refresh');\n        })[\"catch\"](function (error) {\n          $(\".error-post\").text('');\n          if (error.response) {\n            alert(error.response.statusText);\n          } else if (error.request) {\n            // The request was made but no response was received\n            // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n            // http.ClientRequest in node.js\n            console.log(error.request);\n          } else {\n            // Something happened in setting up the request that triggered an Error\n            console.log('Error', error.message);\n          }\n        });\n      }\n      return false;\n    });\n  },\n  onSubmit: function onSubmit() {\n    $(document).on('submit', 'form.save', function () {\n      var fields = starter.getFields($(this));\n      var url = $(this).attr('action');\n      var method = $(this).attr('method');\n      var headers = {\n        'Content-Type': 'application/json',\n        'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content'),\n        'Authorization': 'Bearer ' + token\n      };\n      if (method === 'PUT' || method === 'DELETE') {\n        headers['X-HTTP-Method-Override'] = method;\n      }\n      axios({\n        method: method,\n        url: url,\n        headers: headers,\n        data: fields\n      }).then(function (response) {\n        window.location = response.data.results.url;\n      })[\"catch\"](function (error) {\n        $(\".error-post\").text('');\n        if (error.response) {\n          Object.keys(error.response.data.errors).map(function (item) {\n            $(\".error-\".concat(item)).text(error.response.data.errors[item][0]);\n          });\n        } else if (error.request) {\n          // The request was made but no response was received\n          // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n          // http.ClientRequest in node.js\n          console.log(error.request);\n        } else {\n          // Something happened in setting up the request that triggered an Error\n          console.log('Error', error.message);\n        }\n      });\n      return false;\n    });\n  },\n  formStyled: function formStyled() {\n    $(\".input\").find(\"~ .error:not(:empty)\").siblings(\".input\").addClass(\"no-value\");\n    $('.input:not(.select):not([value=\"\"])').addClass(\"has-value\");\n    $(\".textarea\").find(\"~ .error:not(:empty)\").siblings(\".textarea\").addClass(\"no-value\");\n    $(\".textarea:not(:empty)\").addClass(\"has-value\");\n    $(\"select.input.select\").each(function (index, element) {\n      $(element).find('option').each(function () {\n        if ($(this).is(':selected') && $(this).is('[value]') && $(this).attr('value') !== '') {\n          $(element).addClass('has-value');\n        }\n      });\n    });\n  },\n  getFields: function getFields($form) {\n    var inputs = $form.find('.input');\n    var textareas = $form.find('.textarea');\n    var checkboxes = $form.find('.checkbox');\n    var files = $form.find('.file');\n    var fields = {};\n    $.each(inputs, function (index, item) {\n      fields[$(item).attr('name')] = $(item).val();\n    });\n    $.each(textareas, function (index, item) {\n      fields[$(item).attr('name')] = $(item).val();\n    });\n    $.each(checkboxes, function (index, item) {\n      if ($(item).prop('checked')) {\n        fields[$(item).attr('name')] = $(item).val();\n      }\n    });\n    $.each(files, function (index, item) {\n      if (item.files[0]) {\n        fields[$(item).attr('name')] = item.files[0];\n      }\n    });\n    fields['_token'] = $form.find('input[name=_token]').val();\n    return fields;\n  }\n};\n$(window).on(\"load\", function (e) {\n  event = e || window.event;\n  starter.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/backend.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/backend.js"]();
/******/ 	
/******/ })()
;